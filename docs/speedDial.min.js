
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
var SpeedDial = (function () {
  'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArrayLimit(arr, i) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var SpeedDial = function SpeedDial(_options) {
    var _this = this;

    _classCallCheck(this, SpeedDial);

    _defineProperty(this, "element", function (_ref) {
      var type = _ref.type,
          data = _ref.data,
          el = _ref.el,
          style = _ref.style,
          viebox = _ref.viebox,
          url = _ref.url,
          target = _ref.target,
          path = _ref.path;
      var element = type === 'svg' ? document.createElementNS('http://www.w3.org/2000/svg', type) : document.createElement(type);

      if (data) {
        var _data2 = _slicedToArray(data, 2),
            _data = _data2[0],
            _value = _data2[1];

        element.setAttribute("data-".concat(_data), _value);
      }

      if (el) {
        element.setAttribute('class', el);
      }

      if (style) {
        element.setAttribute('style', style);
      }

      if (url) {
        element.setAttribute('href', url);
        element.setAttribute('rel', 'noopener');
      }

      if (target) {
        element.setAttribute('target', target);
      }

      if (viebox) {
        element.setAttributeNS(null, 'viewBox', viebox);
      }

      if (path) {
        for (var i = 0; i < path.length; i++) {
          var newpath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
          newpath.setAttributeNS(null, 'd', path[i]);
          element.appendChild(newpath);
        }
      }

      return element;
    });

    _defineProperty(this, "select", function (el) {
      return document.querySelector(".".concat(el));
    });

    _defineProperty(this, "iconPlus", function (actionButton) {
      var speedDialBox = _this.select('speed-dial');

      speedDialBox.appendChild(_this.element({
        el: 'button-root',
        type: 'button',
        style: "background-color: ".concat(actionButton.color)
      }));
      speedDialBox.insertAdjacentElement('beforeend', _this.element({
        el: 'action',
        type: 'div',
        data: ['direction', _this.options.data.direction]
      }));

      var speedDialRoot = _this.select('button-root');

      speedDialRoot.appendChild(_this.element({
        el: 'icon icon__plus',
        type: 'svg',
        viebox: actionButton.viebox,
        path: actionButton.path
      }));
    });

    _defineProperty(this, "topButtons", function (options) {
      var speedDialBox = _this.select('speed-dial');

      speedDialBox.insertAdjacentElement('afterend', _this.element({
        el: _this.options.topBtn,
        type: 'div',
        data: ['position', _this.options.data.position]
      }));

      var buttonTop = _this.select(_this.options.topBtn);

      buttonTop.insertAdjacentElement('beforeend', _this.element({
        el: 'top-container',
        type: 'div',
        style: "background-color:".concat(options.color, ";")
      }));

      var buttonTopContainer = _this.select('top-container');

      buttonTopContainer.appendChild(_this.element({
        el: 'icon__top',
        type: 'svg',
        viebox: options.viebox,
        path: [options.path]
      }));

      if (_this.options.position) {
        _this.handleEvent();
      }
    });

    _defineProperty(this, "path", function (paths, viebox) {
      var svgElement = "background-image:url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='".concat(viebox, "'");
      var path = '';

      for (var i = 0; i < paths.length; i++) {
        path += "%3E%3Cpath d='".concat(paths[i], "'%3E%3C/path");
      }

      return "".concat(svgElement + path, "%3E%3C/svg%3E");
    });

    _defineProperty(this, "iconSmall", function (icons) {
      var speedDialAction = _this.select('action');

      var sortIcon = icons.sort(function (a, b) {
        return a.id - b.id;
      });
      var stepTrans = _this.options.steps * sortIcon.length + 50;

      for (var i = 0; i < sortIcon.length; i++) {
        var _sortIcon$i = sortIcon[i],
            className = _sortIcon$i.className,
            name = _sortIcon$i.name,
            viebox = _sortIcon$i.viebox,
            url = _sortIcon$i.url,
            path = _sortIcon$i.path,
            target = _sortIcon$i.target;
        var extendClass = className || '';

        var speedDialItem = _this.element({
          el: "item ".concat(extendClass),
          type: 'div',
          style: "transition-delay: ".concat(stepTrans, "ms;")
        });

        var options = {};

        if (url) {
          options = {
            type: 'a',
            url: url,
            target: target
          };
        } else {
          options = {
            type: 'div'
          };
        }

        var speedDialItemButton = _this.element(_objectSpread2({
          el: 'button--small'
        }, options));

        var speedDialItemByttonDiv = _this.element({
          type: 'div',
          style: _this.path(path, viebox)
        });

        speedDialItemButton.appendChild(speedDialItemByttonDiv);
        speedDialItemByttonDiv.insertAdjacentHTML('afterend', "<span style='".concat(_this.tipPosition(_this.options.data.position, _this.options.data.direction), "'>").concat(name, "</span>"));
        speedDialItem.appendChild(speedDialItemButton);
        speedDialAction.appendChild(speedDialItem);
        stepTrans -= _this.options.steps;
      }
    });

    _defineProperty(this, "tipPosition", function (position, direction) {
      var pos = _this.options.sPos;
      var type = position.split('-')[1] === 'left' ? 'left' : 'right';
      var style;

      if (position === 'top-left' || position === 'top-right') {
        style = direction === 'bottom' ? "".concat(type, ": ").concat(pos, "px") : "top: ".concat(pos, "px");
      } else {
        style = direction === 'top' ? "".concat(type, ": ").concat(pos, "px") : "bottom: ".concat(pos, "px");
      }

      return style;
    });

    _defineProperty(this, "showScrollButton", function () {
      var _this$options = _this.options,
          position = _this$options.position,
          topBtn = _this$options.topBtn;

      var buttonTop = _this.select(topBtn);

      var scrollCheck = window.pageYOffset > position ? true : false;
      buttonTop.classList[scrollCheck ? 'add' : 'remove']('show');
      buttonTop.previousSibling.classList[scrollCheck ? 'add' : 'remove']('margin-bottom');
    });

    _defineProperty(this, "handleEvent", function () {
      window.addEventListener('scroll', _this.showScrollButton);
      window.addEventListener('load', _this.showScrollButton);

      var buttonTop = _this.select(_this.options.topBtn);

      buttonTop.addEventListener('click', function (event) {
        event.preventDefault();
        window.scrollTo({
          top: 0,
          behavior: 'smooth'
        });
      });
    });

    var defaultOption = {
      sPos: 60,
      steps: 50,
      stepTrans: 100,
      position: null,
      topBtn: 'speed-dial__top'
    };

    var option = _objectSpread2(_objectSpread2({}, defaultOption), _options);

    this.options = option;
    document.body.insertAdjacentElement('beforeend', this.element({
      el: "speed-dial",
      type: 'div',
      data: ['position', option.data.position]
    }));
    this.iconPlus(option.icons.iconPlus);
    this.iconSmall(option.icons.iconsSmall);

    if (option.data.position === 'bottom-left' || option.data.position === 'bottom-right') {
      this.topButtons(option.icons.iconTop);
    }
  };

  return SpeedDial;

}());
//# sourceMappingURL=speedDial.min.js.map
